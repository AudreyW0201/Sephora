[
["index.html", "Sephora Chapter 1 Introduction", " Sephora Zhiyi Guo, Fan Wu, Yujie Wang 2019-12-12 Chapter 1 Introduction The world of beauty is growing rapidly over the last decade. It has now become a huge part of our daily lives, no matter your skin color, your background, or your age. However, with the development of internet, distinguishing a truly amazing product has become more and more difficult with omnipresent marketing from beauty brands that have flooded all social media platforms. But going “online” could also lend a hand in analyzing the performance of advertised products: are they as good as their manufacturers claim to be? As data science students, we want to find the “truth” using the power of data: how to find a product, or a brand, that could indeed stand out on its own? We believe with the techniques we have learned so far, we could find an answer to this question. To gather information on different brands and products, we chose Sephora.com as our source of information as it is one of the leading retailers in the beauty community. It features over 300 brands globally, and has been tremendously successful at online sales. We want to use information available on Sephora.com to draw some conclusion regarding performance of top rating brands in Sephora. "],
["data-sources.html", "Chapter 2 Data sources", " Chapter 2 Data sources Choosing Sephora.com as our data source, we wanted to scrape data directly of off its website. We used rvest package in R as our tool to scrape the data. Sephora’s website has a relatively easy layout for us to acquire the data: it has a section that contains the names of all the brands it carries and the link to each brand page. Within each brand page, all products belong to the brand will be displayed and customers could view the products by categories such as makeup, skincare, and etc. It turned out to be a lengthy and quite difficult task to scrape data off the website, as we have encountered some obstacles during the process, the biggest one being figuring out what the corresponding CSS codes are for the particular elements we want on the website. After going through the source code thoroughly, we have successfully identified all the elements we want. First, we scraped off all the brand names and the links to the brand. Then we would go into each link to the brand to find the top 12 best-selling products of each brand. Finally, for each product, basic information is scraped off as well. The resulting data frame consists of 3116 observations, 8 variables in total. Every observation is a product and every product contains information including brand name, product name, category of the product, price, ratings, number of reviews, number of “loves”, and the URL to the product. There are 320 brands in total. All products fall into 10 categories, including Bath &amp; Body, Fragrances, Gifts, Hair, Makeup, Men, Mini Size, Skincare, Tool &amp; Brushes, and Treatments. The highest possible ratings is 5 (ratings are out of stars, and 5 stars are the maximum). “Loves” is a special feature on Sephora: it allows customers to save the product in their personal shopping list as it indicates interest in the product. It captures how many customers have saved this item in their shopping lists. We will use this feature as a measure of popularity in our analysis. As mentioned before, we have met some major difficulties while acquiring our data, which also caused some issues within the data. Sephora uses lazy loading to optimize its online content, which means that we cannot scrape all the products off of its website. However, our key question somewhat relies on the popularity of the products, hence we just needed the top best-selling products from each brand, meaning we could just use the maximum number of products we could acquire from the website. It could be seen as a choice that we want to explore the top selling products, but if we want to, we could be investigating all the products available on Sephora.com. Another issue that went along with web-scraping is that the average ratings we could find for each product are rounds to the nearest 0.5. The reason being that the ratings is not in the form of characters or numbers in HTML tags, but as images of stars(ratings in form of stars). But we will use average ratings for each brand and for each category as a measure of performance, hence rounding of ratings will not have much impact on our analysis given the number of products are generous. Below is our code to scrape the data if you wish to see: #First check if Sephora allows us to scrape data paths_allowed(paths = &quot;https://www.sephora.com&quot;) brands = read_html(&quot;https://www.sephora.com/brands-list&quot;) %&gt;% html_nodes(&quot;.css-kxa5od&quot;) %&gt;% html_attr(&quot;href&quot;) #Read all brands and their links first append = rep(&quot;https://www.sephora.com&quot;,times = length(brands)) brandLink = paste0(append, brands) #Append prefix to each link append = rep(&quot;/all&quot;, times = length(brands)) brandLink = paste0(brandLink, append) cosmetics &lt;- data.frame(matrix(ncol = 8)) #Create a data frame to capture all products x &lt;- c(&quot;Brands&quot;, &quot;Products&quot;, &quot;Categories&quot;, &quot;Prices&quot;, &quot;Ratings&quot;, &quot;Reviews&quot;, &quot;Loves&quot;, &quot;URL&quot;) #Create variables colnames(cosmetics) &lt;- x #Go through all the brands first for (i in 1:length(brands)) { productlist = read_html(brandLink[i]) %&gt;% html_nodes(&quot;.css-ix8km1&quot;) %&gt;% html_attr(&quot;href&quot;) append = rep(&quot;https://www.sephora.com&quot;, times = length(productlist)) productlink = paste0(append, productlist) #Go through every product under each brand if(length(productlist)&gt;0) { for (j in 1:length(productlink)) { productlink[j] = str_replace(productlink[j], &quot; &quot;, &quot;%20&quot;) brandname = read_html(productlink[j]) %&gt;% html_nodes(&quot;.css-euydo4&quot;) %&gt;% html_text() productname = read_html(productlink[j]) %&gt;% html_nodes(&quot;.css-a1jw00 .css-0&quot;) %&gt;%html_text() broadcategory = read_html(productlink[j]) %&gt;% html_nodes(&quot;.css-1ylrown&quot;) %&gt;% html_text() categories = broadcategory[1] price = read_html(productlink[j]) %&gt;% html_nodes(&quot;.css-14hdny6&quot;) %&gt;% html_text() ratings = read_html(productlink[j]) %&gt;% html_nodes(&quot;.css-r17a09&quot;)%&gt;% html_attr(&#39;aria-label&#39;) two = read_html(productlink[j]) %&gt;% html_nodes(&quot;.css-2rg6q7&quot;) %&gt;% html_text() number = two[1] loves = two[2] #Append each product to the data frame newRow &lt;- c(Brands = brandname, Products = productname, Categories = categories, Prices = price, Ratings = ratings, Reviews = number, Loves = loves, URL = productlink[j]) cosmetics &lt;- rbind(cosmetics, newRow) } } } "],
["data-transformation.html", "Chapter 3 Data transformation", " Chapter 3 Data transformation Given the nature of this project and the direct data source from Sephora.com, our data needed very little manipulation. However, we do need to transform the data a little bit so that we could import it into R as a data frame. For each observation, the brand name, product name, URL, and category are naturally in forms of characters so we can leave as it to be. However, we have to transform the price, number of reviews, number of “Loves” and ratings columns in a way that we could later use them as numbers, which means we have strip unnecessary symbols or words in these columns. Fortunately, we could carry these steps all in R. Another issue to resolve in this data is to detect “NA”‘s, or missing values in the data. It is impossible for any observation to be missing product name, brand name, URL, or category given the structure of Sephora’ s website and the fact that we could not have scraped the product off the website if any of these information is missing, so we turned our focus to numeric values of the data set. It is possible for a product have 0 reviews or 0 Loves, but it doesn’t make sense for a product to have a rating of 0. In this case, any product with rating of 0 indicates that no customer has yet to rate the product. Therefore, 0 rating would be a missing value in our data. Below is our code to transform the data if you wish to see: #Remove dollar sign from price column cosmetics$Prices &lt;- str_remove(cos1$Prices, &quot;\\\\$&quot;) #Capture the current price for (i in 1:length(cosmetics$Prices)) { change = FALSE j = 0 while(change == FALSE) { j = j+1 if (j &gt;= nchar(cosmetics$Prices[i])) { change = TRUE } if (substr(cosmetics$Prices[i], j, j) == &quot;(&quot;) { change = TRUE cosmetics$Prices[i] = substr(cosmetics$Prices[i], 1, j-1) } } } #Transform Prices, Ratings, Reviews, and Loves columns to numeric values cosmetics$Prices = ifelse(is.na(cosmetics$Prices), 0, as.numeric(cosmetics$Prices)) cosmetics$Ratings = ifelse(is.na(cosmetics$Ratings), 0, as.numeric(cosmetics$Ratings)) cosmetics$Reviews = ifelse(is.na(cosmetics$Reviews), 0, as.numeric(cosmetics$Reviews)) cosmetics$Loves = ifelse(is.na(cosmetics$Loves), 0, as.numeric(cosmetics$Loves)) "],
["missing-values.html", "Chapter 4 Missing values", " Chapter 4 Missing values As mentioned in the previous sections, our data doesn’t contain many missing values since we scraped data directly from our desired data source. Indicated by the graph, the only missing pattern in our data is rows missing Ratings variable because no customers have yet to review the products. Logically, these observations that lack Ratings variables will have extremly low numbers of total reviews and Loves as the products should have low “popularities”, meaning very few customers have seen or know them. visna(cosmetics, sort = &quot;r&quot;) ## Warning in melt(as.data.frame(xs), ncol(xs)): The melt generic in ## data.table has been passed a data.frame and will attempt to redirect to the ## relevant reshape2 method; please note that reshape2 is deprecated, and this ## redirection is now deprecated as well. To continue using melt methods from ## reshape2 while both libraries are attached, e.g. melt.list, you can prepend ## the namespace like reshape2::melt(as.data.frame(xs)). In the next version, ## this warning will become an error. "],
["results.html", "Chapter 5 Results 5.1 Price 5.2 Composition of Products", " Chapter 5 Results Our focus in this project would be to investigate the factors that contribute to good ratings of a brand, which will be represented by the average ratings of its products. Given our data, we believe two major components will influence the ratings of a brand: its popularity and the composition of its products. Again, we will use total number of reviews and Loves for each brand, i.e., the sum of these statistics of all the brand’s products. We suspect that low popularity could result in bias in ratings caused by extreme ratings, given our metric of performance is average ratings of all products within a brand. However, there exist factors that could influence the popularity of brands, too; for example, brands carrying relatively affordable products could be more popular than brands carrying relatively expensive products as more people could afford cheaper products. Price itself could affect ratings as well: customers might expect expensive products to achieve more than affordable products as they are paying more. Given similar items, more affordable products might have higher ratings. We also suspect that certain categories of products tend to have higher ratings than other categories of products. Therefore, brands with top-selling products which fall in higher-rating categories might have higher ratings than other brands that don’t. We will illustrate these relationships using different graphs and plots. We will use the average ratings of each products within a brand as a measure of performance for each brand. Below is a list of 30 top-rated brands Sephora carries: ggplot(brand[1:30,], aes(x = avg_rating, y = fct_reorder(Brands, avg_rating))) + geom_point(color = &quot;red&quot;) + ylab(&quot;Top 30 Brands&quot;) + xlab(&quot;Average Ratings&quot;) + ggtitle(&quot;Top 30 Rated Brands in Sephora&quot;) + theme(text = element_text(size = 13), plot.title = element_text(size = 16, face = &quot;bold&quot;), axis.text.y = element_text(size = 13), axis.text.x = element_text(size = 13), axis.ticks.y = element_blank(), axis.title.x = element_text(size = 16), axis.title.y = element_text(size = 16), panel.grid.major.x = element_blank(), panel.grid.major.y = element_line(size = 0.1, color = &quot;black&quot;), panel.background = element_rect(fill = &quot;transparent&quot;, color = &quot;black&quot;, size = 0.2), axis.ticks.x = element_line(size = 0.2)) We will use these brands as examples to analyze the reasons behind high ratings. 5.0.1 Popularity We believe popularity could be a factor of high ratings. The first thing we wanted to do is to eliminate brands with high ratings but very limited number of products. Brands with very few products could have biased ratings as it is easily influenced by extreme values. Below is brands with ratings above 4.5 but with less than 4 products. ggplot(brand_num, aes(x = reorder(Brands, freq), y = freq)) + geom_col(fill = &quot;#D55E00&quot;) + labs(x = &quot;Brands&quot;, y = &quot;Number of Products&quot;) + theme(text = element_text(size = 13), plot.title = element_text(size = 16, face = &quot;bold&quot;), panel.background = element_rect(fill = &quot;transparent&quot;, colour = &quot;black&quot;, size = 0.2), panel.grid.major.y = element_blank(), panel.grid.major.x = element_blank(), axis.ticks.x = element_blank(), axis.ticks.y = element_line(size = 0.2)) + ggtitle(&quot;Brands with Average Ratings above 4.5 and \\nwith Less than 4 Products&quot;) + coord_flip() Refer back to the list of top 30 rated brands, “Issey Miyake” only has one product listed on Sephora, meaning the ratings of this product will be the ratings for the brand. We could rule the reason of top ratings for “Issey Miyake” is that it has too few samples of products for us to evaluate the performance of the brand as a whole. The same argument could go for brand “Sand and Sky”, too. Now, could we get the same results with brands with more products? Since the maximum number of products a brand could have 12, it doesn’t make sense to simly use number of products to judge if a brand has enough information(but we could use number of products to see if a brand doesn’t have enough information). Therefore, we turn to number of total reviews and total Loves as a measure of popularity: do most popular brands have highest ratings of all? m &lt;- list(l = 50, r = 50, b = 100, t = 100, pad = 4) t &lt;- list(size = 13) plot_ly(brand[1:30,], x = ~sum_review, y = ~avg_rating, color = I(&quot;#0072B2&quot;), text = ~Brands, hoverinfo = &#39;text&#39;) %&gt;% add_markers() %&gt;% layout(title=&quot;Top 30 Average Rated Brands in Sephora v.s. Total Number of Product Reviews&quot;, font = t, margin = m, xaxis = list(title = &#39;Total Number of Product Reviews&#39;), yaxis = list(title = &#39;Average Ratings&#39;)) As illustrated by the graph, brands with small number of reviews(&lt; 2,000) have a wide range of ratings; however, brands with most number of reviews all have ratings below 4.7, e.g., Shiseido with around 6,500 total reviews but a rating of around 4.65, and belif with over 8,000 total reviews but a rating slightly over 4.5. It is safe to say most popular brands don’t seem to be the best in ratings. It is also obvious that there is no brand that has high ratings and high number of reviews. All best rated brands, say ratings above 4.8, have very few reviews around or below 500. We could say with some confidence that popularity, or in this case, non-popularity could be a reason for high ratings. m &lt;- list(l = 50, r = 50, b = 100, t = 100, pad = 4) t &lt;- list(size = 13) plot_ly(brand[1:30,], x = ~sum_love/1000, y = ~avg_rating, color = I(&quot;#009E73&quot;), text = ~Brands, hoverinfo = &#39;text&#39;) %&gt;% add_markers() %&gt;% layout(title = &quot;Top 30 Average Rated Brands in Sephora v.s. Total Number of Product Loves&quot;, font = t, margin = m, xaxis = list(title = &#39;Total Number of Product Loves in Thousands&#39;), yaxis = list(title = &#39;Average Ratings&#39;)) The same conclusion could be drawn using total of Loves as measure of popularity too: brands with most number of Loves have no ratings above 4.7, and best rated brands all have toal number of Loves well below 50,000. We could use brands with highest popularies, or with highest number of reviews and Loves, as a ceiling to other brands: if a brand could have a good amount of reviews and loves, but could also have a rating close to 5, breaking the ceiling, then the brand must be truly amazing. Here is a parallel coordinate graph with all brands, including their ratings, total number of reivews, and total number of loves. brand1 &lt;- brand coln &lt;- c(&quot;Brands&quot;, &quot;Average Price&quot;, &quot;Number of Products&quot;, &quot;Ratings&quot;, &quot;Total Number of Reviews&quot;, &quot;Total Number of Loves&quot;) colnames(brand1) &lt;- coln brand1 %&gt;% filter(Ratings!=0) %&gt;% dplyr::select(&quot;Ratings&quot;, &quot;Total Number of Reviews&quot;, &quot;Total Number of Loves&quot;) %&gt;% parcoords::parcoords(rownames = F, brushMode = &quot;1D-axes&quot;, reorderable = T, queue = T, alpha = 0.2, width = 800) Most of the brands have ratings in between 4.0 and 4.5, with total number of reivews below 10,000 and total number of Loves below 250,000. Brands with ratings above 4.5 rarely have large number of reviews and Loves as discussed before, but any outlier would be a brand that deserves all the attention. The biggest take away here: most popular brands are never the best rated ones:) 5.1 Price Price could influence brands’ ratings in two ways: first, brands with expensive products could be less popular because fewer people could afford it which in turn affect the ratings; second, customers might expect better performance for high-priced products than for cheaper products given similar items. Below is a histogram of prices on all products in our data set. ggplot(sephora, aes(x = Prices)) + geom_histogram(binwidth = 10, center = 25, color = &#39;#7B7B7B&#39;, fill = &#39;#F0E442&#39;) + ggtitle(&quot;Price Distribution for All Products&quot;) + ylab(&quot;Count&quot;) + xlab(&quot;Prices(USD$)&quot;) + theme(text = element_text(size = 13), plot.title = element_text(size = 16, face = &quot;bold&quot;), panel.background = element_rect(fill = &quot;transparent&quot;, colour = &quot;black&quot;, size = 0.2), panel.grid.major.y = element_line(size = 0.1, color = &quot;black&quot;), panel.grid.major.x = element_line(size = 0.1, color = &quot;black&quot;), axis.ticks.y = element_blank(), axis.ticks.x = element_line(size = 0.2)) Products have a huge range of prices, with the lowest being $1, and highest being $229. More than half of the products are priced between $70 and $160. This is a surprising result as we expected the distribution to be right skewed and more cheap products in the data. So, does price affect popularity and ratings of brands? We first investigate the relationship between price and popularity. We will use average price of all products within a brand as measure of affordability, and again total number of reviews as measure of popularity. plot_ly(brand[1:30, ], x = ~avg_price, y = ~sum_review, color = &#39;#ff000050&#39;, text = ~Brands, hoverinfo = &#39;text&#39;) %&gt;% add_markers() %&gt;% layout(title=&quot;Top 30 Rated Brands: Total Number of Reviews v.s. Average Prices&quot;, xaxis = list(title = &#39;Brand Average Price&#39;), yaxis = list(title = &#39;Total Number of Reviews&#39;)) The result seems to be quite diverging; no obvious patterns emerged from the graph. At any price level, the total number of review ranges from 0 to 2500, with the exception of “belif” and “Shiseido”. Also, given any number of reviews, the price range is quite large, too. It is reasonable to assume that price might not be a factor of popularity. We choose not to use number of Love as an indicator of popularity in this part of analysis because it is more convincing if the customer have accepted the price and bought the product whereas writing a review confirms the action of purchasing the item. Putting the product in Love list might not be as persuasive as buying the product since it is just one click to “Love” the product. Now the question remain, will price and ratings have a stronger correlation? plot_ly(brand[1:30, ], x = ~avg_price, y = ~avg_rating, color = I(&#39;#D55E00&#39;), text = ~Brands, hoverinfo = &#39;text&#39;) %&gt;% add_markers() %&gt;% layout(title=&quot;Top 30 Rated Brands: Ratings v.s. Average Prices&quot;, xaxis = list(title = &#39;Brand Average Price&#39;), yaxis = list(title = &#39;Ratings&#39;)) The plot appears to be more sparce than the last one, and no pattern could be easily detected. It seems that price is not a direct factor on ratings of brands. We want to look more closely at the price distribution of top-rated brands: it might happen that top-rated brands share a similar pattern regarding price distribution. So we draw the price distribution of products from top 10 rated brands. sephora_top10 &lt;- sephora[with(sephora, order(-avg_rating)), ][1:53, ] ggplot(sephora_top10, aes(x = reorder(Brands, Prices, median), y = Prices)) + geom_boxplot(fill = &quot;#CC79A7&quot;, color = &quot;#473e2c&quot;) + ggtitle(&quot;Top 10 Rated Brand v.s. Price Distribution&quot;) + labs(x = &quot;Brands&quot;, y = &quot;Price Distribution&quot;) + theme(text = element_text(size = 13), plot.title = element_text(size = 16, face = &quot;bold&quot;), axis.text.x = element_text( color = &quot;#993333&quot;, size = 13), panel.background = element_rect(fill = &quot;transparent&quot;, colour = &quot;black&quot;, size = 0.2), panel.grid.major.x = element_blank(), panel.grid.major.y = element_line(size = 0.1, color = &quot;black&quot;), axis.ticks.x = element_blank(), axis.ticks.y = element_line(size = 0.2)) + coord_flip() The distributions are quite difference from one and another and they don’t share any common patterns. It is interesting to see that price might not be an important factor to consider any more for customers nowadays to decided whether or not to purchase a product. At this point, we want to rule out price as a primary factor that could affect the ratings of brands. 5.2 Composition of Products As explained before, we want to know if certain categories of products would naturally have higher ratings than other categories of products, thus brands with top-selling products containing higher-rated categories of products will then have higher ratings in total. To clarify, the composition of products we defined here means out of the top-selling products we acquired for each brand, how many products come from each category respectively. ggplot(cat_data, aes(avg_rating, fct_reorder(Categories, avg_rating))) + geom_point(colour = &quot;blue&quot;) + xlab(&quot;Average Ratings&quot;) + ylab(&quot;Categories of Products&quot;) + ggtitle(&quot;Average Ratings for Each Category of Products&quot;) + theme_grey(16) + theme(text = element_text(size = 13), plot.title = element_text(size = 16, face = &quot;bold&quot;), panel.background = element_rect(fill = &quot;transparent&quot;, colour = &quot;black&quot;, size = 0.2), panel.grid.major.y = element_line(size = 0.1, color = &quot;black&quot;), panel.grid.major.x = element_blank(), axis.ticks.y = element_blank(), axis.ticks.x = element_line(size = 0.2)) Out of all observations, “Men” products appears to have highest ratings whereas “Bath &amp; Body” appears to have lowest ratings among all categories. However, we also need to account for volumns of products in each category: ggplot(cat_data, aes(x = reorder(Categories, sum_review), y = sum_review/1000)) + geom_col(fill = &quot;lightblue&quot;) + labs(x = &quot;Categories of Products&quot;, y = &quot;Sum of Reviews in Thousands&quot;) + ggtitle(&quot;Total Number of Review for Each Category&quot;) + coord_flip() + theme(text = element_text(size = 13), plot.title = element_text(size = 16, face = &quot;bold&quot;), panel.background = element_rect(fill = &quot;transparent&quot;, colour = &quot;black&quot;, size = 0.2), panel.grid.major.x = element_line(size = 0.1, color = &quot;black&quot;), panel.grid.major.y = element_blank(), axis.ticks.y = element_blank(), axis.ticks.x = element_line(size = 0.2)) Since we are calculating average ratings, we need to know how many reviews there are for each category of products. Even though “Men” is best-rated among all categories, it has substantially fewer number of reviews than “Makeup”, “Skincare”, and “Fragrance”. Therefore, it might be trivial to consider “Men” as the best-selling type of product as it contains a lot less data points than the most reviewed categories. It might be wise to consider the three most reviewed categories for our analysis, which are “Makeup”, “Skincare”, and “Fragrance”. However, they have quite different ratings: “Fragrance” has the highest among the three, and “Makeup” the lowest. Now let’s compare the compostion of productions for top 10 rated brands and bottom 10 rated brands. highest_10 = cosmetics[cosmetics$Brands %in% high_brands[0:10],] highest_10_df=highest_10 %&gt;% group_by(Brands, Categories) %&gt;% summarize(freq=n())%&gt;%filter() %&gt;% mutate(prop=freq/sum(freq)) ggplot(highest_10_df, aes(fill = Categories, y = prop, x = Brands)) + geom_bar(position = &quot;fill&quot;, stat = &quot;identity&quot;) + scale_fill_brewer(palette=&quot;Pastel1&quot;)+ theme(text = element_text(size = 13), plot.title = element_text(size = 16, face = &quot;bold&quot;), panel.background = element_rect(fill = &quot;transparent&quot;, colour = &quot;black&quot;, size = 0.2), panel.grid.major.x = element_blank(), panel.grid.major.y = element_blank(), axis.ticks.x = element_blank(), axis.ticks.y = element_line(size = 0.2)) + ggtitle(&quot;Composition of Products for Top 10 Rated Brands&quot;) + labs(x = &quot;Brands&quot;, y = &quot;Proportion of Each Category of Products&quot;) + coord_flip() Out of the top 10 rated brands, four of them only sell “Fragrance”, whereas one for “Skincare” and one for “Makeup”. Composition of products might actually influence the ratings of brands: since “Fragrance” has a higher rating in general, it could be that brands which only sell perfumes, or mostly sell perfumes can end up with a higher ratings. lowest_10 = cosmetics[cosmetics$Brands %in% high_brands[46:55],] lowest_10_df = lowest_10 %&gt;% group_by(Brands, Categories) %&gt;% summarize(freq=n()) %&gt;% filter() %&gt;% mutate(prop=freq/sum(freq)) ggplot(lowest_10_df, aes(fill = Categories, y = prop, x = Brands)) + geom_bar(position = &quot;fill&quot;, stat = &quot;identity&quot;) + scale_fill_brewer(palette=&quot;Set3&quot;)+ theme(text = element_text(size = 13), plot.title = element_text(size = 16, face = &quot;bold&quot;), panel.background = element_rect(fill = &quot;transparent&quot;, colour = &quot;black&quot;, size = 0.2), panel.grid.major.x = element_blank(), panel.grid.major.y = element_blank(), axis.ticks.x = element_blank(), axis.ticks.y = element_line(size = 0.2)) + ggtitle(&quot;Composition of Products for Bottom 10 Rated Brands&quot;) + labs(x = &quot;Brands&quot;, y = &quot;Proportion of Each Category of Products&quot;) + coord_flip() Out of the bottom 10 rated brands, three of them only sell “Skincare”, whereas two for “Makeup” and one for “Fragrance”. Although “Skincare” doesn’t have the lowest rating among the three, 30% of lowest rating brands only sell “Skincare”. Also, highest-rated category “Fragrance” among the three does have lowest number of brands only selling perfumes. We could make some assumption between composition of products of a brand and its ratings: a brand that sell highest rating categories of products tend to be have higher ratings. In conclusion, although not very strongly, popularities of a brand and composition of products could potentially influence the ratings of the brand on Sephora. Price might not be an as important as a factor we consider it to be when accessing the performance of a brand. "],
["interactive-component.html", "Chapter 6 Interactive component", " Chapter 6 Interactive component ui &lt;- fluidPage( titlePanel(&quot;Composition of Products of Sephora Beauty Brands&quot;), sidebarLayout( sidebarPanel( radioButtons(&quot;selection&quot;, &quot;Choose top or bottom brands:&quot;, c(&quot;Top Rated&quot; = &quot;top&quot; , &quot;Bottom Rated&quot; = &quot;bottom&quot;)), br(), sliderInput(&quot;n&quot;, &quot;Number of Brands:&quot;, value = 10, min = 1, max = 50), selectInput(&quot;categories&quot;, &quot;Categories:&quot;, choices = c(&quot;Fragrance&quot;, &quot;Skincare&quot;, &quot;Makeup&quot;, &quot;Bath &amp; Body&quot;, &quot;Mini size&quot;, &quot;Tools &amp; Brushes&quot;, &quot;Hair&quot;, &quot;Men&quot;, &quot;Gifts&quot;)), hr()), mainPanel( tabsetPanel(type = &quot;tabs&quot;, tabPanel(&quot;Plot&quot;, plotOutput(&quot;plot&quot;))), p(&quot;&quot;) ) ) ) server &lt;- function(input, output) { d &lt;- reactive({ dist &lt;- switch(input$selection) dist(input$n) }) output$plot &lt;- renderPlot({ MyData &lt;- read.csv(file=&quot;~/Desktop/data_.csv&quot;, header=TRUE) sephora = MyData sephora$Ratings = ifelse(is.na(sephora$Ratings), 0, as.numeric(sephora$Ratings)) sephora$Reviews = ifelse(is.na(sephora$Reviews), 0, as.numeric(sephora$Reviews)) sephora &lt;- sephora %&gt;% group_by(Brands) %&gt;% mutate(sum_review = sum(Reviews)) %&gt;% mutate(sum_love = sum(Loves)) %&gt;% mutate(avg_rating = sum(Ratings*Reviews)/sum_review) %&gt;% ungroup() brand &lt;- sephora[c(1,9,10,11)] brand &lt;- brand %&gt;% distinct() num = input$n if (input$selection == &quot;top&quot;) { brand &lt;- brand[with(brand, order(-avg_rating)),] } else { brand &lt;- brand[with(brand, order(avg_rating)),] } high_brands = brand[&quot;Brands&quot;]$Brands top = MyData[MyData$Brands %in% high_brands[0:num],] top_df = top %&gt;% group_by(Brands,Categories) %&gt;% summarize(freq=n()) %&gt;% filter() %&gt;% mutate(prop = freq/sum(freq)) top_df &lt;-top_df[order(-top_df$prop),] cat_input = input$categories new_df = top_df %&gt;% group_by(Categories)%&gt;% mutate(k = ifelse(Categories == cat_input,1+prop,0)) ggplot(new_df, aes(fill = Categories, y = prop, x = reorder(Brands, -k))) + geom_bar(position = &quot;fill&quot;, stat = &quot;identity&quot;) + xlab(&quot;Brands&quot;) + theme(axis.text.x = element_text(color = &quot;#993333&quot;, size = 13)) + ggtitle(paste0(&quot;Proportion of categories for top&quot;, num, &quot;Brand Ratings&quot;)) + coord_flip() }) } shinyApp(ui, server, options = list(height = 550)) Shiny applications not supported in static R Markdown documents "],
["conclusion.html", "Chapter 7 Conclusion", " Chapter 7 Conclusion This project could be a great start to something even more meaningful. Sephora provides much more information than we have used in this project. Besides basic information of a product, Sephora also provides its ingredient list, suitable skin type, and much more. We could also relate the discussion of top rated brands to the style of product design the brand uses as to what are the main ingredients, what are the main target of skin types and etc. Nowadays, more and more brands market towards the use of “clean” ingredients in their products, and to see if choice of ingredients speak to customers would be an interesting extention to this project. Sephora also asks customers to provide detailed information such as skin color, skin type, eye color, concerns, and etc when writing reviews. These customer profiling information along could be used to analyze what types of products or brands fit certain types of customers with specific concerns and characteristics. This project also has application in machine learning: given some customer profiles and product information, could we predict the performance of certain products? It is certainly exciting to work with real life data, and we believe we could certainly dig even further with the tools we have. If you wish to re-create our project, see the Github repo here for data and everything else: https://github.com/wufanisabella2/5702FinalProject *All colors used in this project are colorblind friendly. "]
]
